{"version":3,"sources":["components/button.js","components/gamePreparation.js","components/startWindow.js","components/gameOver.js","components/boardCell.js","components/scoreBoard.js","utils.js","round.js","game.js","components/board.js","components/gameWindow.js","App.js","serviceWorker.js","index.js"],"names":["button","props","miniButton","shufflebtnSelect","buttonText","click","onClick","disabled","react_default","a","createElement","className","classNames","shuffleActive","GamePreparation","_ref","onClose","_useState","useState","id","name","_useState2","Object","slicedToArray","colors","setColors","_useState3","_useState4","selectedColor","setSelectedColor","_useState5","_useState6","players","setPlayers","_useState7","_useState8","playerName","setPlayerName","playerNameRef","useRef","ref","value","placeholder","onChange","e","target","map","color","key","selected","colorClick","components_button","newColors","toConsumableArray","playerColor","console","log","picked","length","concat","playerCells","points","find","current","focus","addPlayer","player","style","backgroundColor","StartWindow","showGamePreparation","setShowGamePreparation","components_gamePreparation","GameOver","winner","shift","BoardCell","cell","children","locked","clickable","scoreBoard","active","makeAlfa","letter","amount","letterCount","makeRandomTileFromAlfaAndDecreaseItsAmount","alfa","reduce","total","Math","floor","random","filter","drawTilesFromBag","bag","numberOfTiles","tiles","checkIfTilesLeftInBag","i","push","findNeighbors","tile","t","index","makeNeighborsClickable","relatedTiles","forEach","executePoints","roundCells","cellsWithPoints","getPoints","boardCells","findLockedNeighborsInRound","lockedNeighbor","velocity","lockedNeighbors","n","findCellsInRound","newBoardCells","clickedCell","newActiveCells","moreLockedNeighbors","determineDirection","list","findNeighborsDirection","cellsInRound","Set","findUnlockedNeighborsInRound","cellToCheck","neighbors","activeCells","sort","b","first","last","pop","abs","makeMainWord","direction","unlockedRoundCells","mainWord","lesserRoundCells","findLesserNeighborsInRound","higherRoundCells","moveTileToPlayerCells","newPlayerCells","found","playerCell","activePlayer","gamifyPlayers","inputPlayers","Array","fill","_","createPlayerCells","setup","game","createBoardCells","gameAlfa","createBag","lockWord","cells","drawTiles","numberOfCellsWithoutTiles","newTiles","changeActivePlayer","findNeighborsInWord","notMainWord","findWordsInRoundCells","words","includes","leftNeighbors","rightNeighbors","word","l","r","upNeighbors","downNeighbors","u","d","findAllWords","ShuffleIcon","width","height","xmlns","fill-rule","clip-rule","ExecuteIcon","viewBox","ExitIcon","Board","onGameOver","setBoardCells","setPlayerCells","setActivePlayer","_useState9","_useState10","activeTile","setActiveTile","_useState11","_useState12","setRoundCells","_useState13","_useState14","showPlayerTiles","setShowPlayerTiles","_useState15","_useState16","toggle","setToggle","_useState17","_useState18","executeBtnDisabled","setExecuteBtnDisabled","_useState19","_useState20","shuffleTilesActive","setShuffleTilesActive","useEffect","_setup","clickOnCell","newRoundCells","cellClick","filterdRoundCells","BoardCells","unlockedCells","makeAllUnlockedCellsClickable","CheckifValidWord","cellInLine","lastCell","firstGameCell","lockedRoundCells","firstInRound","nextCell","playerCellClick","_ref2","shuffleSelected","toggleTileShuffleSelected","components_scoreBoard","boardCell","board_ShuffleIcon","defineProperty","board_ExecuteIcon","tilesToChange","numOfTiles","shuffleTiles","wordPoints","execute","board_ExitIcon","GameWindow","showMenu","setShowMenu","showGameOver","setShowGameOver","gameStart","setGameStart","cursor","components_startWindow","components_gameOver","components_board","App","components_gameWindow","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef6cb38b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style/button.css\";\r\nimport classNames from \"classnames\";\r\n\r\nconst button = props => {\r\n  // console.log(props);\r\n  let miniButton = props.miniButton;\r\n  let shufflebtnSelect = props.shufflebtnSelect;\r\n  let buttonText = props.buttonText;\r\n  let click = props.onClick;\r\n  let disabled = props.disabled;\r\n  return (\r\n    <div\r\n      className={classNames(\"buttonArea\", {\r\n        miniButton: miniButton && miniButton === true,\r\n        disabled: disabled && disabled === true,\r\n        shuffleActive: shufflebtnSelect && shufflebtnSelect === true\r\n      })}\r\n      onClick={click}\r\n    >\r\n      {<div className=\"btn\">{buttonText}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default button;\r\n","import React, { useState, useRef } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Button from \"./button\";\r\n\r\nimport \"./style/gamePreparation.css\";\r\n\r\nconst GamePreparation = ({ onClose }) => {\r\n  const [colors, setColors] = useState([\r\n    { id: 1, name: \"teal\" },\r\n    { id: 2, name: \"purple\" },\r\n    { id: 3, name: \"darkred\" },\r\n    { id: 4, name: \"Crimson\" },\r\n    { id: 5, name: \"yellow\" },\r\n    { id: 6, name: \"limegreen\" }\r\n  ]);\r\n  const [selectedColor, setSelectedColor] = useState(null);\r\n  const [players, setPlayers] = useState([\r\n    // {\r\n    //   id: 1,\r\n    //   name: \"Pontus\",\r\n    //   color: \"lightblue\",\r\n    //   playerCells: [],\r\n    //   points: 0\r\n    // },\r\n    // {\r\n    //   id: 2,\r\n    //   name: \"Julia\",\r\n    //   color: \"pink\",\r\n    //   playerCells: [],\r\n    //   points: 0\r\n    // },\r\n    // {\r\n    //   id: 3,\r\n    //   name: \"Belgarath\",\r\n    //   color: \"green\",\r\n    //   playerCells: [],\r\n    //   points: 0\r\n    // }\r\n  ]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const playerNameRef = useRef();\r\n  // let inputText = \"player\" + (players.length + 1);\r\n  // export const findPlayers = () => {\r\n  //   return players;\r\n  // };\r\n\r\n  const colorClick = color => {\r\n    // console.log(\"color\", color.id, color);\r\n\r\n    if (selectedColor && selectedColor.selected === true) {\r\n      selectedColor.selected = false;\r\n    }\r\n    setColors(colors);\r\n    setSelectedColor(color);\r\n  };\r\n\r\n  const addPlayer = () => {\r\n    let newColors = [...colors];\r\n    let playerColor = selectedColor;\r\n    if (!playerColor) {\r\n      return console.log(\"no color picked\");\r\n    }\r\n    if (playerColor && playerColor.picked) {\r\n      return console.log(\"color allready picked\");\r\n    }\r\n    if (playerName === \"\") {\r\n      return console.log(\"no name picked\");\r\n    }\r\n    let id = players.length + 1;\r\n    setPlayers([\r\n      ...players,\r\n      {\r\n        id: id,\r\n        name: playerName,\r\n        color: playerColor.name,\r\n        playerCells: [],\r\n        points: 0\r\n      }\r\n    ]);\r\n\r\n    let col = newColors.find(color => color === selectedColor);\r\n    col.picked = true;\r\n    setColors(newColors);\r\n\r\n    setSelectedColor(null);\r\n    setPlayerName(\"\");\r\n\r\n    playerNameRef.current.focus();\r\n    // console.log(\"players\", players);\r\n  };\r\n\r\n  // const startGame = () => {\r\n  //   console.log(\"startgame\");\r\n  // };\r\n\r\n  const startGame = () => {\r\n    onClose(players);\r\n  };\r\n\r\n  return (\r\n    <div className=\"gamePreparation\">\r\n      <div className=\"playerPreparation\">\r\n        <div className=\"playerNameInput\">\r\n          <input\r\n            ref={playerNameRef}\r\n            className=\"textInput\"\r\n            value={playerName}\r\n            placeholder=\"Write player name here..\"\r\n            onChange={e => setPlayerName(e.target.value)}\r\n          ></input>\r\n        </div>\r\n        <div className=\"colorSelect\">\r\n          {colors.map(color => (\r\n            <div\r\n              key={color.id}\r\n              className={classNames(color.name, {\r\n                selected: selectedColor && color === selectedColor\r\n              })}\r\n              onClick={() => colorClick(color)}\r\n            >\r\n              {\" \"}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"AddPlayerBtn\">\r\n          <Button buttonText={\"Add player\"} onClick={() => addPlayer()} />\r\n        </div>\r\n      </div>\r\n      <div className=\"players\">\r\n        <div className=\"playerTitle\">players:</div>\r\n        <div className=\"playerList\">\r\n          {players.map(player => (\r\n            <div\r\n              key={player.id}\r\n              className=\"player\"\r\n              style={{\r\n                backgroundColor: player.color\r\n              }}\r\n            >\r\n              {player.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"startBtn\">\r\n        <Button buttonText={\"Start game\"} onClick={startGame} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePreparation;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"./button\";\r\n// import classNames from \"classnames\";\r\n\r\nimport \"./style/startWindow.css\";\r\nimport GamePreparation from \"./gamePreparation\";\r\n\r\nconst StartWindow = ({ onClose }) => {\r\n  const [showGamePreparation, setShowGamePreparation] = useState(false);\r\n\r\n  const toggleGamePreparation = () => {\r\n    if (showGamePreparation === true) {\r\n      setShowGamePreparation(false);\r\n    } else {\r\n      setShowGamePreparation(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"startWindow\">\r\n      <div className=\"startMenu\">\r\n        {/* <div className=\"closeBtn\" onClick={onClose}>\r\n          <div className=\"close\">X</div>\r\n        </div> */}\r\n        {/* <div className=\"header\">Scrabble</div> */}\r\n        <div className=\"buttons\">\r\n          <Button buttonText={\"New game\"} onClick={() => toggleGamePreparation()} />\r\n          {/* <Button buttonText={\"LeaderBoard\"} onClick={() => console.log(\"LeaderBoard\")} /> */}\r\n        </div>\r\n        {showGamePreparation && <GamePreparation onClose={onClose} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartWindow;\r\n","import React from \"react\";\r\n\r\nimport \"./style/gameOver.css\";\r\n\r\n// const fakePlayers = [\r\n//   {\r\n//     name: \"Player 2\",\r\n//     score: 9000000000,\r\n//     bestWord: \"COMPREHENSIONS\"\r\n//   },\r\n//   {\r\n//     name: \"Player 1\",\r\n//     score: 278,\r\n//     bestWord: \"FUNCTOOLS\"\r\n//   },\r\n//   {\r\n//     name: \"Player 3\",\r\n//     score: 74,\r\n//     bestWord: \"BOAT\"\r\n//   },\r\n// ];\r\n\r\nconst GameOver = props => {\r\n  // console.log(\"props\", props);\r\n  let onClick = props.onClick;\r\n  let players = props.players;\r\n  // console.log(\"players\", players);\r\n  let winner = players.shift();\r\n\r\n  return (\r\n    <div className=\"gameOver\" onClick={onClick && onClick}>\r\n      <div className=\"gameOverTitleContainer\">\r\n        <div className=\"gameOverTitle\">And the WINNER is:</div>\r\n      </div>\r\n      <div className=\"winnerContainer\">\r\n        <div className=\"winner\" key={winner.id}>\r\n          <span>{winner.name}</span>\r\n          <span>{winner.points}</span>\r\n        </div>\r\n      </div>\r\n      <div className={\"gameOverPlayers\"}>\r\n        {players.map(player => {\r\n          return (\r\n            <div className=\"gameOverPlayer\" key={player.id}>\r\n              <span>{player && player.name}</span>\r\n              <span>{player && player.points}</span>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOver;\r\n","import React from \"react\";\r\n\r\nconst BoardCell = ({ cell, onClick, children }) => (\r\n  <div\r\n    className={`cell ${cell.locked && \"locked\"} ${cell.clickable && \"clickable\"}`}\r\n    onClick={onClick}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default BoardCell;\r\n","import React from \"react\";\r\nimport \"./style/scoreBoard.css\";\r\nimport classNames from \"classnames\";\r\n\r\nconst scoreBoard = ({ players }) => {\r\n  let active = players.find(player => player.active === true);\r\n  // console.log(\"active\", active && active.id);\r\n\r\n  return (\r\n    <div className=\"scoreBoard\">\r\n      {players.map(player => {\r\n        return (\r\n          <div\r\n            className={classNames(\"playerInfo\", {\r\n              active: active && player.id === active.id\r\n            })}\r\n            key={player.id}\r\n            style={{\r\n              backgroundColor: player.color\r\n            }}\r\n          >\r\n            <div className=\"playerName\">{player.name}</div>\r\n            <div className=\"playerPoints\">Points: {player.points} </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default scoreBoard;\r\n","let makeAlfa = () => [\r\n  { letter: \"A\", amount: 9, points: 1 },\r\n  { letter: \"B\", amount: 2, points: 3 },\r\n  { letter: \"C\", amount: 2, points: 3 },\r\n  { letter: \"D\", amount: 4, points: 4 },\r\n  { letter: \"E\", amount: 1, points: 1 },\r\n  { letter: \"F\", amount: 2, points: 4 },\r\n  { letter: \"G\", amount: 3, points: 2 },\r\n  { letter: \"H\", amount: 2, points: 4 },\r\n  { letter: \"I\", amount: 9, points: 1 },\r\n  { letter: \"J\", amount: 1, points: 8 },\r\n  { letter: \"K\", amount: 1, points: 5 },\r\n  { letter: \"L\", amount: 4, points: 1 },\r\n  { letter: \"M\", amount: 2, points: 3 },\r\n  { letter: \"N\", amount: 6, points: 1 },\r\n  { letter: \"O\", amount: 8, points: 1 },\r\n  { letter: \"P\", amount: 2, points: 3 },\r\n  { letter: \"Q\", amount: 1, points: 10 },\r\n  { letter: \"R\", amount: 6, points: 1 },\r\n  { letter: \"S\", amount: 4, points: 1 },\r\n  { letter: \"T\", amount: 6, points: 1 },\r\n  { letter: \"U\", amount: 4, points: 1 },\r\n  { letter: \"V\", amount: 2, points: 4 },\r\n  { letter: \"W\", amount: 2, points: 4 },\r\n  { letter: \"X\", amount: 1, points: 8 },\r\n  { letter: \"Y\", amount: 2, points: 4 },\r\n  { letter: \"Z\", amount: 1, points: 10 }\r\n];\r\n\r\n// let alfaTest = [\r\n//   { letter: \"A\", amount: 5, points: 1 },\r\n//   { letter: \"B\", amount: 1, points: 3 },\r\n//   { letter: \"C\", amount: 1, points: 3 },\r\n//   { letter: \"D\", amount: 1, points: 4 },\r\n//   { letter: \"E\", amount: 1, points: 1 },\r\n//   { letter: \"F\", amount: 1, points: 4 },\r\n//   { letter: \"G\", amount: 1, points: 2 },\r\n//   { letter: \"H\", amount: 1, points: 4 },\r\n//   { letter: \"I\", amount: 1, points: 1 },\r\n//   { letter: \"J\", amount: 1, points: 8 },\r\n//   { letter: \"K\", amount: 1, points: 5 },\r\n//   { letter: \"L\", amount: 1, points: 1 },\r\n//   { letter: \"M\", amount: 1, points: 3 },\r\n//   { letter: \"N\", amount: 1, points: 1 },\r\n//   { letter: \"O\", amount: 1, points: 1 },\r\n//   { letter: \"P\", amount: 2, points: 3 },\r\n//   { letter: \"Q\", amount: 1, points: 10 },\r\n//   { letter: \"R\", amount: 1, points: 1 },\r\n//   { letter: \"S\", amount: 1, points: 1 },\r\n//   { letter: \"T\", amount: 1, points: 1 },\r\n//   { letter: \"U\", amount: 1, points: 1 },\r\n//   { letter: \"V\", amount: 1, points: 4 },\r\n//   { letter: \"W\", amount: 2, points: 4 },\r\n//   { letter: \"X\", amount: 1, points: 8 },\r\n//   { letter: \"Y\", amount: 2, points: 4 },\r\n//   { letter: \"Z\", amount: 1, points: 10 }\r\n// ];\r\n\r\nexport function createBoardCells() {\r\n  function BoardCell(index) {\r\n    let clickableTile = null;\r\n    if (index === 112) {\r\n      clickableTile = true;\r\n    } else clickableTile = false;\r\n    return {\r\n      index,\r\n      clickable: clickableTile,\r\n      tile: null\r\n    };\r\n  }\r\n\r\n  return Array(225)\r\n    .fill()\r\n    .map((_, i) => new BoardCell(i));\r\n}\r\n\r\nlet letterCount = 0;\r\nconst makeRandomTileFromAlfaAndDecreaseItsAmount = alfa => {\r\n  const tilesInBag = alfa.reduce((total, letter) => {\r\n    return total + letter.amount;\r\n  }, 0);\r\n\r\n  if (tilesInBag === 0) return console.log(\"No tiles left\") || { letter: \"NOPE\" };\r\n\r\n  const letter = alfa[Math.floor(Math.random() * alfa.length)];\r\n  const result = alfa.find(alfa => alfa.letter === letter.letter);\r\n  result.amount -= 1;\r\n  alfa = alfa.filter(alfa => alfa.amount > 0);\r\n  letterCount++;\r\n\r\n  return { letter: letter.letter, id: letterCount, points: letter.points };\r\n};\r\n\r\nexport const makeAllUnlockedCellsClickable = BoardCells => {\r\n  let unlockedCells = BoardCells.filter(cell => !cell.locked);\r\n  // console.log(unlockedCells);\r\n  makeNeighborsClickable(unlockedCells);\r\n};\r\n\r\nexport function createBag() {\r\n  // console.log(\"in create bag\");\r\n  const gameAlfa = makeAlfa();\r\n  const tilesInBag = gameAlfa.reduce((total, letter) => {\r\n    return total + letter.amount;\r\n  }, 0);\r\n\r\n  const bag = [];\r\n\r\n  let i = tilesInBag;\r\n  while (i > 0) {\r\n    bag.push(makeRandomTileFromAlfaAndDecreaseItsAmount(gameAlfa));\r\n    i--;\r\n  }\r\n\r\n  console.log(\"bag in create bag\", bag);\r\n\r\n  return bag;\r\n}\r\n\r\nexport function createPlayerCells(bag) {\r\n  const tiles = drawTilesFromBag(bag, 7);\r\n\r\n  return Array(7)\r\n    .fill()\r\n    .map((_, i) => ({\r\n      index: i,\r\n      tile: tiles.pop()\r\n    }));\r\n}\r\n\r\nexport function drawTilesFromBag(bag, numberOfTiles) {\r\n  const tiles = [];\r\n  if (checkIfTilesLeftInBag(bag) === true) {\r\n    for (let i = 0; i < numberOfTiles; i++) {\r\n      tiles.push(bag.shift());\r\n    }\r\n  }\r\n  return tiles;\r\n}\r\n\r\n// const findLockedNeighborsInRound = (lockedNeighbor, velocity, lockedNeighbors) => {\r\n//   let newBoardCells = [...boardCells];\r\n\r\n//   if (!lockedNeighbors) {\r\n//     lockedNeighbors = [];\r\n//   }\r\n\r\n//   let n = newBoardCells.find(cell => lockedNeighbor.index + velocity === cell.index);\r\n\r\n//   if (n.locked) {\r\n//     lockedNeighbors.push(n);\r\n//     return findLockedNeighborsInRound(n, velocity, lockedNeighbors);\r\n//   } else return lockedNeighbors;\r\n// };\r\n\r\nexport function checkIfTilesLeftInBag(bag) {\r\n  if (bag.length === 0) {\r\n    return false;\r\n  } else return true;\r\n}\r\n\r\nexport const findNeighbors = (tiles, tile) => {\r\n  let relatedTiles = tiles.filter(\r\n    t =>\r\n      t.index === tile.index - 1 ||\r\n      t.index === tile.index + 1 ||\r\n      t.index === tile.index + 15 ||\r\n      t.index === tile.index - 15\r\n  );\r\n  // console.log(relatedTiles);\r\n  return relatedTiles;\r\n};\r\n\r\nexport const makeNeighborsClickable = relatedTiles => {\r\n  relatedTiles.forEach(tile => {\r\n    tile.clickable = true;\r\n  });\r\n  return relatedTiles;\r\n};\r\n\r\nexport const makeNeighborsUnclickable = relatedTiles => {\r\n  return relatedTiles.map(cell => {\r\n    if (!cell.tile) {\r\n      cell.clickable = false;\r\n    }\r\n    return cell;\r\n  });\r\n};\r\n\r\nexport const lockTilesWithLetter = cells =>\r\n  cells.map(cell => {\r\n    if (cell.tile) {\r\n      cell.locked = true;\r\n      // cell.clickable = false;\r\n      let neighbors = findNeighbors(cells, cell);\r\n      makeNeighborsClickable(neighbors);\r\n    }\r\n    return cell;\r\n  });\r\n\r\nexport const getPoints = cellsWithPoints => {\r\n  // console.log(\"in getPoints\", cellsWithPoints);\r\n  let points = 0;\r\n  for (let i = 0; i < cellsWithPoints.length; i++) {\r\n    let tile = cellsWithPoints[i].tile;\r\n    points += tile.points;\r\n  }\r\n  // let points = countPoints(newActiveCells);\r\n\r\n  // console.log(\"Current word points\", points);\r\n  return points;\r\n};\r\n\r\nexport const executePoints = roundCells => {\r\n  return getPoints(roundCells);\r\n};\r\n\r\nexport const makeLockedNeighborsUnclickable = newBoardCells => {\r\n  // let newBoardCells = [...boardCells];\r\n  //find locked cells\r\n  let lockedCellsWithTile = newBoardCells.filter(cell => cell.tile && cell.locked);\r\n\r\n  let lockedNeighbors = [];\r\n\r\n  //foreach locked cell find neighbor and make them unclickable\r\n  lockedCellsWithTile.forEach(cell => {\r\n    let newNeighbors = findNeighbors(newBoardCells, cell);\r\n    newNeighbors.forEach(neighbor => lockedNeighbors.push(neighbor));\r\n    makeNeighborsUnclickable(newNeighbors);\r\n  });\r\n\r\n  return lockedNeighbors;\r\n};\r\n\r\nexport const makeRoundCellsNeighborsUnclickable = (newBoardCells, roundCells) => {\r\n  let roundNeighbors = [];\r\n\r\n  roundCells.forEach(cell => {\r\n    let neighbors = findNeighbors(newBoardCells, cell);\r\n    neighbors.forEach(neighbor => {\r\n      roundNeighbors.push(neighbor);\r\n    });\r\n  });\r\n  makeNeighborsUnclickable(roundNeighbors);\r\n};\r\n","import { findNeighbors, makeNeighborsClickable } from \"./utils\";\r\n\r\nlet boardCells = [];\r\nlet playerCells = [];\r\nlet roundCells = [];\r\nlet latestClickedCell = null;\r\n\r\nconst findLockedNeighborsInRound = (lockedNeighbor, velocity, lockedNeighbors) => {\r\n  if (!lockedNeighbors) {\r\n    lockedNeighbors = [];\r\n  }\r\n\r\n  let n = boardCells.find(cell => lockedNeighbor.index + velocity === cell.index);\r\n\r\n  if (n.locked) {\r\n    lockedNeighbors.push(n);\r\n    return findLockedNeighborsInRound(n, velocity, lockedNeighbors);\r\n  } else return lockedNeighbors;\r\n};\r\n\r\nexport function checkIfCellIsClickable(clickedCell) {\r\n  if (clickedCell.locked || clickedCell.clickable === false) {\r\n    return \"no\";\r\n  }\r\n}\r\n\r\nconst findNeighborsDirection = list => {\r\n  let lockedNeighbors = [];\r\n\r\n  list.forEach(cell => {\r\n    let l = findLockedNeighborsInRound(cell, -1);\r\n    l.forEach(cell => lockedNeighbors.push(cell));\r\n    let r = findLockedNeighborsInRound(cell, +1);\r\n    r.forEach(cell => lockedNeighbors.push(cell));\r\n    let u = findLockedNeighborsInRound(cell, -15);\r\n    u.forEach(cell => lockedNeighbors.push(cell));\r\n    let d = findLockedNeighborsInRound(cell, +15);\r\n    d.forEach(cell => lockedNeighbors.push(cell));\r\n  });\r\n\r\n  return lockedNeighbors;\r\n};\r\n\r\nexport const findCellsInRound = (newBoardCells, clickedCell) => {\r\n  let newActiveCells = boardCells.filter(cell => !!cell.tile && !cell.locked);\r\n\r\n  let direction = determineDirection();\r\n\r\n  let moreLockedNeighbors = findNeighborsDirection(newActiveCells, direction);\r\n\r\n  let cellsInRound = [...newActiveCells, ...moreLockedNeighbors, clickedCell];\r\n  roundCells = [...new Set(cellsInRound)];\r\n\r\n  let newRoundCells = roundCells.filter(cell => cell.tile);\r\n\r\n  // console.log(\"roundCells in round\", newRoundCells);\r\n  // newRoundCells.forEach(cell => console.log(cell.tile.letter));\r\n\r\n  return newRoundCells;\r\n};\r\n\r\nconst findUnlockedNeighborsInRound = (cellToCheck, velocity, neighbors) => {\r\n  if (!neighbors) {\r\n    neighbors = [];\r\n  }\r\n\r\n  let n = boardCells.find(cell => cellToCheck.index + velocity === cell.index);\r\n\r\n  if (n.tile) {\r\n    if (n.locked) {\r\n      neighbors.push(n);\r\n    }\r\n    return findUnlockedNeighborsInRound(n, velocity, neighbors);\r\n  } else return neighbors;\r\n};\r\n\r\nconst findLesserNeighborsInRound = (cellToCheck, velocity, neighbors) => {\r\n  if (!neighbors) {\r\n    neighbors = [];\r\n  }\r\n\r\n  let n = boardCells.find(cell => cellToCheck.index - velocity === cell.index);\r\n\r\n  if (n.tile) {\r\n    if (n.locked) {\r\n      neighbors.push(n);\r\n    }\r\n    return findUnlockedNeighborsInRound(n, velocity, neighbors);\r\n  } else return neighbors;\r\n};\r\n\r\nexport const determineDirection = () => {\r\n  const activeCells = boardCells\r\n    .filter(cell => !!cell.tile && !cell.locked)\r\n    .sort((a, b) => a.index - b.index);\r\n\r\n  if (activeCells.length < 2) return \"no\";\r\n\r\n  const first = activeCells.shift();\r\n  const last = activeCells.pop();\r\n  const distance = Math.abs(first.index - last.index);\r\n\r\n  if (distance < 15) return \"horizontal\";\r\n  else return \"vertical\";\r\n};\r\n\r\nexport const makeMainWord = (roundCells, direction) => {\r\n  let unlockedRoundCells = roundCells.filter(cell => !cell.locked);\r\n  let cellToCheck = unlockedRoundCells[0];\r\n  let mainWord = [];\r\n  console.log(\"cell to check\", cellToCheck);\r\n  mainWord.push(cellToCheck);\r\n  let velocity = 0;\r\n  if (direction === \"horizontal\") {\r\n    velocity = 1;\r\n  }\r\n  if (direction === \"vertical\") {\r\n    velocity = 15;\r\n  }\r\n  if (direction === \"no\") {\r\n    return mainWord;\r\n  }\r\n  // console.log(\"celocity\", velocity);\r\n  if (velocity !== 0) {\r\n    let lesserRoundCells = findLesserNeighborsInRound(cellToCheck, velocity);\r\n    let higherRoundCells = findUnlockedNeighborsInRound(cellToCheck, velocity);\r\n    mainWord = lesserRoundCells.concat(higherRoundCells, unlockedRoundCells);\r\n  }\r\n\r\n  console.log(\"mainWord in make mainword\", mainWord);\r\n  mainWord.forEach(cell => console.log(cell.tile.letter));\r\n\r\n  let sortedMainWord = mainWord.sort((a, b) => a.index - b.index);\r\n  return sortedMainWord;\r\n};\r\n\r\nexport const moveTileToPlayerCells = (tile, newBoardCells, newPlayerCells) => {\r\n  playerCells = newPlayerCells;\r\n  boardCells = newBoardCells;\r\n  let found = false;\r\n  // console.log(\"newplayer cells\", newPlayerCells);\r\n  // console.log(\"playercells\", playerCells);\r\n  playerCells = playerCells.map(playerCell => {\r\n    if (!found && !playerCell.tile) {\r\n      playerCell.tile = tile;\r\n      found = true;\r\n    }\r\n    return playerCell;\r\n  });\r\n};\r\n\r\nexport function cellClick(clickedCell, activeTile, newBoardCells, newPlayerCells) {\r\n  playerCells = newPlayerCells;\r\n  boardCells = newBoardCells;\r\n  latestClickedCell = clickedCell;\r\n\r\n  // starting point\r\n  if (clickedCell.tile) {\r\n    console.log(\"cell has tile\");\r\n    moveTileToPlayerCells(clickedCell.tile, boardCells, playerCells);\r\n    let newRoundCells = findCellsInRound(boardCells, clickedCell);\r\n    roundCells = newRoundCells.filter(cell => cell.tile);\r\n    clickedCell.tile = null;\r\n    // console.log(\"roundcells in cell has tile\");\r\n    // roundCells.forEach(cell => console.log(cell, cell.tile));\r\n  }\r\n  // console.log(\"clicked cell\", clickedCell);\r\n\r\n  if (activeTile && !clickedCell.tile) {\r\n    clickedCell.tile = activeTile;\r\n    let newActiveCells = boardCells.filter(cell => !!cell.tile && !cell.locked);\r\n\r\n    let clickedCellNeighbors = findNeighbors(boardCells, clickedCell);\r\n    let lockedNeighbors = clickedCellNeighbors.filter(cell => cell.locked);\r\n    let roundCells = findCellsInRound(boardCells, clickedCell);\r\n    let direction = determineDirection();\r\n    // let mainWord = makeMainWord(roundCells, direction);\r\n\r\n    playerCells = playerCells.map(cell => {\r\n      if (cell.tile && cell.tile.id === activeTile.id) cell.tile = null;\r\n\r\n      return cell;\r\n    });\r\n  }\r\n}\r\n","// import React from \"react\";\r\n// import StartWindow from \"./components/startWindow\";'\r\n\r\nimport { findPlayers } from \"./components/gamePreparation\";\r\nimport { determineDirection, makeMainWord } from \"./round\";\r\n\r\nimport {\r\n  createBoardCells,\r\n  createBag,\r\n  createPlayerCells,\r\n  drawTilesFromBag,\r\n  lockTilesWithLetter,\r\n  executePoints\r\n} from \"./utils\";\r\nimport GameOver from \"./components/gameOver\";\r\n\r\nlet boardCells = [];\r\nlet bag = [];\r\nlet players = [];\r\nlet activePlayer = null;\r\n\r\nfunction gamifyPlayers(inputPlayers) {\r\n  // console.log(\"inputplayers\", inputPlayers);\r\n  activePlayer = inputPlayers[0];\r\n  return inputPlayers.map(player => {\r\n    player.playerCells = createPlayerCells(bag);\r\n    // console.log(\"playercells\", player.playerCells);\r\n    player.playerCells.forEach(cell => {\r\n      cell.tile.color = player.color;\r\n    });\r\n    // player.playerCells.forEach(cell => console.log(cell.tile.color));\r\n    return player;\r\n  });\r\n}\r\n\r\nexport const setup = inputPlayers => {\r\n  // console.log(\"im in setup\");\r\n  let game = {};\r\n  if (boardCells.length === 0) {\r\n    boardCells = createBoardCells();\r\n  }\r\n  bag = createBag();\r\n  // console.log(\"bag\", bag);\r\n  game.boardCells = boardCells;\r\n  game.bag = bag;\r\n\r\n  if (inputPlayers) {\r\n    players = inputPlayers;\r\n    game.players = gamifyPlayers(inputPlayers);\r\n  }\r\n  game.activePlayer = activePlayer;\r\n\r\n  return game;\r\n};\r\n\r\nexport function checkIfTilesLeftInBag(bag) {\r\n  if (bag.length === 0) {\r\n    return false;\r\n  } else return true;\r\n}\r\n\r\nconst lockWord = () => {\r\n  lockTilesWithLetter(boardCells);\r\n};\r\n\r\nconst drawTiles = () => {\r\n  if (bag.length === 0) return;\r\n  const numberOfCellsWithoutTiles = activePlayer.playerCells.filter(cell => !cell.tile).length;\r\n\r\n  if (numberOfCellsWithoutTiles === 0) return;\r\n\r\n  let newTiles = drawTilesFromBag(bag, numberOfCellsWithoutTiles);\r\n  newTiles.forEach(tile => (tile.color = activePlayer.color));\r\n  // console.log(\"new tiles\", newTiles);\r\n  // newTiles.forEach(tile => console.log(tile.color));\r\n\r\n  activePlayer.playerCells = activePlayer.playerCells.map(cell => {\r\n    if (!cell.tile) {\r\n      cell.tile = newTiles.pop();\r\n    }\r\n\r\n    return cell;\r\n  });\r\n  // activePlayer.playerCells.forEach(cell => console.log(cell.letter));\r\n};\r\n\r\nconst changeActivePlayer = () => {\r\n  // console.log(\"activePlayer\", activePlayer);\r\n  // console.log(\"Players\", players);\r\n  if (activePlayer.id === players.length) {\r\n    activePlayer = players[0];\r\n    activePlayer.active = true;\r\n  } else {\r\n    activePlayer = players.find(player => player.id === activePlayer.id + 1);\r\n    // console.log(\"active player\", activePlayer);\r\n    activePlayer.active = true;\r\n  }\r\n};\r\n\r\nconst findNeighborsInWord = (notMainWord, cellToCheck, velocity, neighbors) => {\r\n  if (!neighbors) {\r\n    neighbors = [];\r\n  }\r\n\r\n  let n = notMainWord.find(cell => cellToCheck.index + velocity === cell.index);\r\n\r\n  if (n && n.tile) {\r\n    neighbors.push(n);\r\n    return findNeighborsInWord(notMainWord, n, velocity, neighbors);\r\n  } else return neighbors;\r\n};\r\n\r\nconst findAllWords = (roundCells, direction) => {\r\n  let words = [];\r\n  let mainWord = makeMainWord(roundCells, direction);\r\n  // console.log(\"mainword in findallwords\", mainWord);\r\n  words.push(mainWord);\r\n  // console.log(\"roundcells in findallwords\", roundCells);\r\n\r\n  let notMainWord = roundCells.filter(cell => {\r\n    return !mainWord.includes(cell);\r\n  });\r\n\r\n  mainWord.forEach(cell => {\r\n    if (direction === \"vertical\") {\r\n      let leftNeighbors = findNeighborsInWord(notMainWord, cell, -1);\r\n      let rightNeighbors = findNeighborsInWord(notMainWord, cell, +1);\r\n      if (leftNeighbors.length > 0 || rightNeighbors.length > 0) {\r\n        let word = [];\r\n        leftNeighbors.forEach(l => word.push(l));\r\n        rightNeighbors.forEach(r => word.push(r));\r\n        word.push(cell);\r\n        words.push(word);\r\n      }\r\n    }\r\n    if (direction === \"horizontal\") {\r\n      let upNeighbors = findNeighborsInWord(notMainWord, cell, -15);\r\n      let downNeighbors = findNeighborsInWord(notMainWord, cell, +15);\r\n      if (upNeighbors.length > 0 || downNeighbors.length > 0) {\r\n        let word = [];\r\n        upNeighbors.forEach(u => word.push(u));\r\n        downNeighbors.forEach(d => word.push(d));\r\n        word.push(cell);\r\n        words.push(word);\r\n      }\r\n    }\r\n  });\r\n  return words;\r\n};\r\n\r\nconst findWordsInRoundCells = roundCells => {\r\n  let direction = determineDirection();\r\n  // console.log(\"findWordsInRoundCells direction\", direction);\r\n  let sortedRoundCells = roundCells.sort((a, b) => {\r\n    return a.id - b.id;\r\n  });\r\n  let words = findAllWords(sortedRoundCells, direction);\r\n  return words;\r\n};\r\n\r\nexport const shuffleTiles = playerCells => {\r\n  let tilesToChange = playerCells.filter(cell => cell.tile.shuffleSelected);\r\n\r\n  tilesToChange.forEach(cell => {\r\n    bag.push(cell.tile);\r\n    cell.tile = null;\r\n  });\r\n  let numOfTiles = tilesToChange.length;\r\n\r\n  let newTiles = drawTilesFromBag(bag, numOfTiles);\r\n  newTiles.forEach(tile => (tile.color = activePlayer.color));\r\n\r\n  activePlayer.playerCells = activePlayer.playerCells.map(cell => {\r\n    if (!cell.tile) {\r\n      cell.tile = newTiles.pop();\r\n    }\r\n\r\n    return cell;\r\n  });\r\n  activePlayer.active = false;\r\n  changeActivePlayer();\r\n  return boardCells;\r\n};\r\n\r\nexport function execute(roundCells, onGameOver) {\r\n  let words = findWordsInRoundCells(roundCells);\r\n  let wordsApproved = true;\r\n  console.log(\"execute\");\r\n\r\n  if (wordsApproved) {\r\n    lockWord();\r\n    drawTiles();\r\n\r\n    let wordPoints = executePoints(roundCells);\r\n    activePlayer.points += wordPoints;\r\n\r\n    let noTilesLeft = activePlayer.playerCells.find(cell => cell.tile);\r\n    if (!noTilesLeft) {\r\n      // if (noTilesLeft) {\r\n      const sortedPlayers = players.sort((a, b) => b.points - a.points);\r\n      onGameOver(sortedPlayers);\r\n    } else {\r\n      activePlayer.active = false;\r\n      changeActivePlayer();\r\n      return boardCells;\r\n    }\r\n  } else {\r\n    return console.log(\"Word not approved\");\r\n  }\r\n}\r\n\r\n// export const ShufflePlayerTiles = () => {\r\n//   player.playerCells.forEach(cell => bag.push(cell.tile));\r\n//   player.playerCells.forEach(cell => (cell.tile = null));\r\n//   drawTiles();\r\n// };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport BoardCell from \"./boardCell\";\r\nimport Button from \"./button\";\r\nimport ScoreBoard from \"./scoreBoard\";\r\n// import ActivePlayerInfo from \"./activePlayerInfo\";\r\nimport { setup, execute, shuffleTiles } from \"../game\";\r\nimport {\r\n  moveTileToPlayerCells,\r\n  cellClick,\r\n  findCellsInRound,\r\n  determineDirection,\r\n  makeMainWord\r\n} from \"../round\";\r\nimport { findNeighbors, makeAllUnlockedCellsClickable } from \"../utils\";\r\nimport \"./style/board.css\";\r\nimport classNames from \"classnames\";\r\n\r\nconst ShuffleIcon = () => (\r\n  <svg\r\n    width=\"24\"\r\n    height=\"24\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill-rule=\"evenodd\"\r\n    clip-rule=\"evenodd\"\r\n  >\r\n    <path d=\"M12 0c6.623 0 12 5.377 12 12s-5.377 12-12 12-12-5.377-12-12 5.377-12 12-12zm2.085 14h-9v2h9v3l5-4-5-4v3zm-4-6v-3l-5 4 5 4v-3h9v-2h-9z\" />\r\n  </svg>\r\n);\r\nconst ExecuteIcon = () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M3 22v-20l18 10-18 10z\" />\r\n  </svg>\r\n);\r\n\r\nconst ExitIcon = () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z\" />\r\n  </svg>\r\n);\r\n\r\nconst Board = ({ players: inputPlayers, onGameOver }) => {\r\n  const [boardCells, setBoardCells] = useState([]);\r\n  const [playerCells, setPlayerCells] = useState([]);\r\n  const [players, setPlayers] = useState([]);\r\n  const [activePlayer, setActivePlayer] = useState(null);\r\n  const [activeTile, setActiveTile] = useState(null);\r\n  const [roundCells, setRoundCells] = useState([]);\r\n  const [showPlayerTiles, setShowPlayerTiles] = useState(false);\r\n  const [toggle, setToggle] = useState(\"show\");\r\n  const [executeBtnDisabled, setExecuteBtnDisabled] = useState(false);\r\n  const [shuffleTilesActive, setShuffleTilesActive] = useState(false);\r\n  // const [clickedCell, setClickedCell] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Board mount\", inputPlayers);\r\n    const { boardCells, activePlayer, players } = setup(inputPlayers);\r\n    setBoardCells(boardCells);\r\n    setPlayerCells(activePlayer.playerCells);\r\n    setActivePlayer(activePlayer);\r\n    setPlayers(players);\r\n  }, []);\r\n\r\n  const clickOnCell = cell => {\r\n    if (cell.locked || cell.clickable === false) {\r\n      return console.log(\"You cant click on this cell\");\r\n    }\r\n    console.log(\"First\", executeBtnDisabled);\r\n    cellClick(cell, activeTile, boardCells, playerCells);\r\n    setActiveTile(null);\r\n    let newRoundCells = findCellsInRound(boardCells, cell);\r\n    let filterdRoundCells = newRoundCells.filter(cell => cell.tile);\r\n    setRoundCells(filterdRoundCells);\r\n    // CheckifValidWord(cell);\r\n    makeAllUnlockedCellsClickable(boardCells);\r\n    // console.log(\"round cells in clicked cells\", roundCells);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (roundCells && roundCells.length) {\r\n      CheckifValidWord();\r\n    }\r\n  }, [roundCells]);\r\n\r\n  const CheckifValidWord = clickedCell => {\r\n    let direction = determineDirection();\r\n    let mainWord = makeMainWord(roundCells, direction);\r\n    let cellInLine = [];\r\n\r\n    for (let i = 0; i < mainWord.length; i++) {\r\n      let cell = mainWord[i];\r\n      let lastCell = mainWord[mainWord.length - 1];\r\n      let velocity = 0;\r\n\r\n      let firstGameCell = boardCells.find(cell => cell.index === 112);\r\n      let lockedRoundCells = roundCells.filter(cell => cell.locked);\r\n      let firstInRound = roundCells.includes(firstGameCell);\r\n      let noLockedcellsInRound = lockedRoundCells.length < 1;\r\n\r\n      // console.log(\"first in rouuund\", firstInRound);\r\n      // if(roundCells.includes(firstGameCell) ||)\r\n\r\n      if (noLockedcellsInRound) {\r\n        if (firstInRound === false) {\r\n          return setExecuteBtnDisabled(true);\r\n        }\r\n      }\r\n\r\n      if (direction === \"horizontal\") {\r\n        velocity = 1;\r\n      }\r\n      if (direction === \"vertical\") {\r\n        velocity = 15;\r\n      }\r\n      if (direction === \"no\") {\r\n        console.log(\"only one tile\");\r\n      }\r\n      let nextCell = mainWord[i + 1];\r\n\r\n      if (nextCell && cell.index + velocity === nextCell.index) {\r\n        cellInLine.push(cell);\r\n      }\r\n\r\n      if (cell === lastCell) {\r\n        console.log(\"hello\");\r\n        cellInLine.push(cell);\r\n      }\r\n    }\r\n\r\n    // console.log(\"same length\", cellInLine.length === mainWord.length);\r\n    // const sameLength = cellInLine.length === mainWord.length;\r\n    // setExecuteBtnDisabled(sameLength);\r\n    if (cellInLine.length === mainWord.length) {\r\n      setExecuteBtnDisabled(false);\r\n    } else {\r\n      setExecuteBtnDisabled(true);\r\n    }\r\n  };\r\n\r\n  const changeShuffleTilesActive = () => {\r\n    if (shuffleTilesActive === true) {\r\n      setShuffleTilesActive(false);\r\n    } else {\r\n      setShuffleTilesActive(true);\r\n    }\r\n  };\r\n  const toggleTileShuffleSelected = tile => {\r\n    tile.shuffleSelected = !tile.shuffleSelected;\r\n    setPlayerCells([...playerCells]);\r\n  };\r\n\r\n  const playerCellClick = ({ tile }) => {\r\n    if (shuffleTilesActive) {\r\n      toggleTileShuffleSelected(tile);\r\n      return;\r\n    }\r\n    if (activeTile) {\r\n      moveTileToPlayerCells(activeTile, boardCells, playerCells);\r\n      setActiveTile(null);\r\n    }\r\n    if (tile) {\r\n      setActiveTile(tile);\r\n    }\r\n  };\r\n\r\n  const executeClick = () => {\r\n    if (shuffleTilesActive === true) {\r\n      let activeCells = roundCells.filter(cell => !cell.locked);\r\n      let aC = activeCells.length === 0;\r\n\r\n      if (aC === false) {\r\n        return console.log(\"Cant shuffle with tiles on board\");\r\n      }\r\n      shuffleTiles(playerCells);\r\n      // fulfix för omrendering\r\n      // setBoardCells([...boardCells]);\r\n      const { activePlayer } = setup();\r\n      setPlayerCells(activePlayer.playerCells);\r\n      setActivePlayer(activePlayer);\r\n      setShuffleTilesActive(false);\r\n    }\r\n    if (executeBtnDisabled === true) {\r\n      return console.log(\"not valid word\");\r\n    }\r\n    if (roundCells.length === 0) {\r\n      return console.log(\"Enter a Word\");\r\n    }\r\n\r\n    let newBoardCells = [];\r\n    setToggle(false);\r\n    // console.log(\"roundcell\", roundCells);\r\n    if (shuffleTilesActive == false) {\r\n      newBoardCells = execute(roundCells, onGameOver);\r\n    } else {\r\n      newBoardCells = boardCells;\r\n    }\r\n    const { activePlayer } = setup();\r\n\r\n    setBoardCells(newBoardCells);\r\n    setPlayerCells(activePlayer.playerCells);\r\n    setActivePlayer(activePlayer);\r\n    setRoundCells([]);\r\n    setExecuteBtnDisabled(true);\r\n  };\r\n\r\n  const toggleLetters = () => {\r\n    if (showPlayerTiles) {\r\n      setShowPlayerTiles(false);\r\n      setToggle(\"Show\");\r\n    } else {\r\n      setShowPlayerTiles(true);\r\n      setToggle(\"Hide\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"stuffLeftOfCell\">\r\n        <ScoreBoard players={players} />\r\n        {/* <Button className=\"shuffleBtn\" buttonText={<ShuffleIcon />} /> */}\r\n      </div>\r\n      <div className=\"cells\">\r\n        {boardCells.map(cell => (\r\n          <BoardCell cell={cell} key={cell.index} onClick={() => clickOnCell(cell)}>\r\n            {cell.tile && (\r\n              <div\r\n                className=\"tile\"\r\n                style={{\r\n                  backgroundColor: cell.tile.color\r\n                }}\r\n              >\r\n                <div className=\"tileLetter\">{cell.tile.letter}</div>\r\n                <div></div>\r\n                <div className=\"tilePoints\">{cell.tile.points}</div>\r\n              </div>\r\n            )}\r\n          </BoardCell>\r\n        ))}\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <Button\r\n          className=\"shuffleBtn\"\r\n          shufflebtnSelect={shuffleTilesActive}\r\n          buttonText={<ShuffleIcon />}\r\n          miniButton={true}\r\n          onClick={changeShuffleTilesActive}\r\n        />\r\n        <div className=\"playerCells\">\r\n          <div className=\"toggleBtn\" onClick={() => toggleLetters()}>\r\n            {toggle}\r\n          </div>\r\n          {playerCells.map(playerCell => (\r\n            <div\r\n              className=\"playerCell\"\r\n              // className={classNames(\"playerCell\", { active: isPlayerCellActive(playerCell) })}\r\n              key={playerCell.index}\r\n              onClick={() => playerCellClick(playerCell)}\r\n            >\r\n              {playerCell.tile && showPlayerTiles && (\r\n                <div\r\n                  className={classNames(\"tile\", {\r\n                    [\"shuffleSelected\"]:\r\n                      playerCell.tile.shuffleSelected && playerCell.tile.shuffleSelected === true\r\n                  })}\r\n                >\r\n                  {playerCell.tile.letter}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <Button\r\n          buttonText={<ExecuteIcon />}\r\n          disabled={executeBtnDisabled}\r\n          miniButton={true}\r\n          onClick={executeClick}\r\n        />\r\n      </div>\r\n      <div className=\"stuffRightOfCell\">\r\n        <Button\r\n          className=\"button\"\r\n          buttonText={<ExitIcon />}\r\n          miniButton={true}\r\n          onClick={() => console.log(\"Exit\")}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\n\r\nimport StartWindow from \"./startWindow\";\r\nimport GameOver from \"./gameOver.js\";\r\nimport Board from \"./board\";\r\n\r\nimport \"./style/gameWindow.css\";\r\nconst GameWindow = () => {\r\n  const [showMenu, setShowMenu] = useState(true);\r\n  const [showGameOver, setShowGameOver] = useState(false);\r\n  const [gameStart, setGameStart] = useState(false); // const toggleShowMenu = () => setShowMenu(!showMenu);\r\n  const [players, setPlayers] = useState([]);\r\n\r\n  const endGame = players => {\r\n    console.log(\"GameWindow endGame players\", players);\r\n    setPlayers(players);\r\n    setGameStart(false);\r\n    setShowGameOver(true);\r\n  };\r\n\r\n  const gameStarter = players => {\r\n    setPlayers(players);\r\n    setShowMenu(false);\r\n    setGameStart(true);\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setShowGameOver(false);\r\n    setShowMenu(true);\r\n  };\r\n\r\n  // console.log(\"GameWindow render\", players);\r\n  // console.log(\"gameStart\", gameStart);\r\n\r\n  return (\r\n    <div className=\"gameWindow\">\r\n      <div\r\n        className=\"game-header\"\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => setShowMenu(true)}\r\n      ></div>\r\n      {showMenu && <StartWindow onClose={gameStarter} />}\r\n      {showGameOver && <GameOver onClick={restartGame} players={players} />}\r\n      {gameStart && <Board players={players} onGameOver={endGame} />}\r\n      {/* <Board players={players} /> */}\r\n      <div className=\"game-footer\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameWindow;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameWindow from \"./components/gameWindow\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\" /> */}\n      <GameWindow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}